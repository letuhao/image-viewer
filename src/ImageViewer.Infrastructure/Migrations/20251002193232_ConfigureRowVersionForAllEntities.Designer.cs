// <auto-generated />
using System;
using System.Collections.Generic;
using ImageViewer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ImageViewer.Infrastructure.Migrations
{
    [DbContext(typeof(ImageViewerDbContext))]
    [Migration("20251002193232_ConfigureRowVersionForAllEntities")]
    partial class ConfigureRowVersionForAllEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ImageViewer.Domain.Entities.BackgroundJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompletedItems")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CurrentItem")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Errors")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("EstimatedCompletion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Parameters")
                        .HasColumnType("jsonb");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("jsonb");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TotalItems")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("JobType");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.ToTable("BackgroundJobs", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CacheFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("CurrentSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("MaxSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Path");

                    b.HasIndex("Priority");

                    b.ToTable("CacheFolders", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.HasIndex("Type");

                    b.ToTable("Collections", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CollectionCacheBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CacheFolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.HasKey("Id");

                    b.HasIndex("CacheFolderId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("CollectionId", "CacheFolderId")
                        .IsUnique();

                    b.ToTable("CollectionCacheBindings", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CollectionSettingsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AdditionalSettingsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("{}");

                    b.Property<bool>("AutoGenerateCache")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutoGenerateThumbnails")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("CacheExpiration")
                        .HasColumnType("interval");

                    b.Property<int>("CacheHeight")
                        .HasColumnType("integer");

                    b.Property<int>("CacheWidth")
                        .HasColumnType("integer");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<int>("ThumbnailHeight")
                        .HasColumnType("integer");

                    b.Property<int>("ThumbnailWidth")
                        .HasColumnType("integer");

                    b.Property<int>("TotalImages")
                        .HasColumnType("integer");

                    b.Property<long>("TotalSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId")
                        .IsUnique();

                    b.ToTable("CollectionSettings", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CollectionStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("AverageHeight")
                        .HasColumnType("integer");

                    b.Property<int>("AverageWidth")
                        .HasColumnType("integer");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastViewedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<int>("TotalImages")
                        .HasColumnType("integer");

                    b.Property<long>("TotalSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId")
                        .IsUnique();

                    b.HasIndex("LastViewedAt");

                    b.HasIndex("ViewCount");

                    b.ToTable("CollectionStatistics", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CollectionTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("TagId");

                    b.HasIndex("CollectionId", "TagId")
                        .IsUnique();

                    b.ToTable("CollectionTags", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("FileSize");

                    b.HasIndex("Filename");

                    b.HasIndex("Height");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Width");

                    b.HasIndex("CollectionId", "Filename")
                        .IsUnique();

                    b.ToTable("Images", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.ImageCacheInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CachePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImageId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.HasKey("Id");

                    b.HasIndex("CachedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("ImageId1");

                    b.HasIndex("IsValid");

                    b.ToTable("ImageCacheInfos", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.ImageMetadataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AdditionalMetadataJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("{}");

                    b.Property<string>("Camera")
                        .HasColumnType("text");

                    b.Property<string>("ColorSpace")
                        .HasColumnType("text");

                    b.Property<string>("Compression")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<string>("Software")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("ImageMetadata", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UsageCount");

                    b.ToTable("Tags", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.ViewSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrentImageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ImagesViewed")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<TimeSpan>("TotalViewTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("CurrentImageId");

                    b.HasIndex("EndedAt");

                    b.HasIndex("StartedAt");

                    b.ToTable("ViewSessions", "public");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CollectionCacheBinding", b =>
                {
                    b.HasOne("ImageViewer.Domain.Entities.CacheFolder", "CacheFolder")
                        .WithMany("Bindings")
                        .HasForeignKey("CacheFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageViewer.Domain.Entities.Collection", "Collection")
                        .WithMany("CacheBindings")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CacheFolder");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CollectionSettingsEntity", b =>
                {
                    b.HasOne("ImageViewer.Domain.Entities.Collection", "Collection")
                        .WithOne("Settings")
                        .HasForeignKey("ImageViewer.Domain.Entities.CollectionSettingsEntity", "CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CollectionStatistics", b =>
                {
                    b.HasOne("ImageViewer.Domain.Entities.Collection", "Collection")
                        .WithOne("Statistics")
                        .HasForeignKey("ImageViewer.Domain.Entities.CollectionStatistics", "CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CollectionTag", b =>
                {
                    b.HasOne("ImageViewer.Domain.Entities.Collection", "Collection")
                        .WithMany("Tags")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageViewer.Domain.Entities.Tag", "Tag")
                        .WithMany("CollectionTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.Image", b =>
                {
                    b.HasOne("ImageViewer.Domain.Entities.Collection", "Collection")
                        .WithMany("Images")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.ImageCacheInfo", b =>
                {
                    b.HasOne("ImageViewer.Domain.Entities.Image", "Image")
                        .WithOne("CacheInfo")
                        .HasForeignKey("ImageViewer.Domain.Entities.ImageCacheInfo", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageViewer.Domain.Entities.Image", null)
                        .WithMany("CacheInfoCollection")
                        .HasForeignKey("ImageId1");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.ImageMetadataEntity", b =>
                {
                    b.HasOne("ImageViewer.Domain.Entities.Image", "Image")
                        .WithOne("Metadata")
                        .HasForeignKey("ImageViewer.Domain.Entities.ImageMetadataEntity", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.ViewSession", b =>
                {
                    b.HasOne("ImageViewer.Domain.Entities.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageViewer.Domain.Entities.Image", "CurrentImage")
                        .WithMany()
                        .HasForeignKey("CurrentImageId");

                    b.Navigation("Collection");

                    b.Navigation("CurrentImage");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.CacheFolder", b =>
                {
                    b.Navigation("Bindings");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.Collection", b =>
                {
                    b.Navigation("CacheBindings");

                    b.Navigation("Images");

                    b.Navigation("Settings");

                    b.Navigation("Statistics");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.Image", b =>
                {
                    b.Navigation("CacheInfo");

                    b.Navigation("CacheInfoCollection");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("ImageViewer.Domain.Entities.Tag", b =>
                {
                    b.Navigation("CollectionTags");
                });
#pragma warning restore 612, 618
        }
    }
}
