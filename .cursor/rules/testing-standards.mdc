---
description: Testing standards and best practices for ImageViewer Platform
alwaysApply: true
---

# Testing Standards - ImageViewer Platform

## Testing Strategy

### Test Pyramid
- **Unit Tests (70%)**: Test individual components in isolation
- **Integration Tests (20%)**: Test component interactions
- **End-to-End Tests (10%)**: Test complete user workflows

### Test Categories
- **Unit Tests**: Domain logic, services, utilities
- **Integration Tests**: Database, external services, APIs
- **Contract Tests**: API contracts, message formats
- **Performance Tests**: Load, stress, scalability
- **Security Tests**: Authentication, authorization, vulnerabilities

## Unit Testing

### Test Structure
```csharp
[TestClass]
public class CollectionServiceTests
{
    private Mock<ICollectionRepository> _mockRepository;
    private Mock<ILogger<CollectionService>> _mockLogger;
    private Mock<IMessageQueueService> _mockMessageQueue;
    private CollectionService _service;
    
    [TestInitialize]
    public void Setup()
    {
        _mockRepository = new Mock<ICollectionRepository>();
        _mockLogger = new Mock<ILogger<CollectionService>>();
        _mockMessageQueue = new Mock<IMessageQueueService>();
        
        _service = new CollectionService(
            _mockRepository.Object,
            _mockLogger.Object,
            _mockMessageQueue.Object);
    }
    
    [TestMethod]
    public async Task CreateCollectionAsync_ValidRequest_ReturnsCollection()
    {
        // Arrange
        var request = new CreateCollectionRequest
        {
            Name = "Test Collection",
            Path = "/test/path",
            Type = CollectionType.Image,
            LibraryId = ObjectId.GenerateNewId()
        };
        
        var expectedCollection = new Collection(
            request.LibraryId,
            request.Name,
            request.Path,
            request.Type);
        
        _mockRepository.Setup(r => r.CreateAsync(It.IsAny<Collection>()))
            .ReturnsAsync(expectedCollection);
        
        // Act
        var result = await _service.CreateCollectionAsync(request);
        
        // Assert
        Assert.IsNotNull(result);
        Assert.AreEqual(request.Name, result.Name);
        Assert.AreEqual(request.Path, result.Path);
        Assert.AreEqual(request.Type, result.Type);
        
        _mockRepository.Verify(r => r.CreateAsync(It.IsAny<Collection>()), Times.Once);
        _mockMessageQueue.Verify(m => m.PublishAsync(It.IsAny<CollectionScanMessage>()), Times.Once);
    }
    
    [TestMethod]
    public async Task CreateCollectionAsync_DuplicateName_ThrowsException()
    {
        // Arrange
        var request = new CreateCollectionRequest
        {
            Name = "Existing Collection",
            Path = "/test/path",
            Type = CollectionType.Image,
            LibraryId = ObjectId.GenerateNewId()
        };
        
        _mockRepository.Setup(r => r.CreateAsync(It.IsAny<Collection>()))
            .ThrowsAsync(new DuplicateCollectionException("Collection already exists"));
        
        // Act & Assert
        await Assert.ThrowsExceptionAsync<DuplicateCollectionException>(
            () => _service.CreateCollectionAsync(request));
    }
    
    [TestMethod]
    public async Task GetCollectionAsync_ValidId_ReturnsCollection()
    {
        // Arrange
        var collectionId = ObjectId.GenerateNewId();
        var expectedCollection = new Collection(
            ObjectId.GenerateNewId(),
            "Test Collection",
            "/test/path",
            CollectionType.Image);
        
        _mockRepository.Setup(r => r.GetByIdAsync(collectionId))
            .ReturnsAsync(expectedCollection);
        
        // Act
        var result = await _service.GetCollectionAsync(collectionId);
        
        // Assert
        Assert.IsNotNull(result);
        Assert.AreEqual(expectedCollection.Id, result.Id);
        Assert.AreEqual(expectedCollection.Name, result.Name);
        
        _mockRepository.Verify(r => r.GetByIdAsync(collectionId), Times.Once);
    }
    
    [TestMethod]
    public async Task GetCollectionAsync_InvalidId_ThrowsException()
    {
        // Arrange
        var collectionId = ObjectId.GenerateNewId();
        
        _mockRepository.Setup(r => r.GetByIdAsync(collectionId))
            .ReturnsAsync((Collection)null);
        
        // Act & Assert
        await Assert.ThrowsExceptionAsync<CollectionNotFoundException>(
            () => _service.GetCollectionAsync(collectionId));
    }
}
```

### Test Naming Convention
- **MethodName_Scenario_ExpectedResult**
- Use descriptive names that explain the test case
- Include the method being tested, the scenario, and expected outcome

### Test Data
```csharp
public static class TestDataFactory
{
    public static CreateCollectionRequest CreateValidCollectionRequest()
    {
        return new CreateCollectionRequest
        {
            Name = "Test Collection",
            Path = "/test/path",
            Type = CollectionType.Image,
            LibraryId = ObjectId.GenerateNewId(),
            Description = "Test description",
            Tags = new List<string> { "test", "collection" },
            AutoScan = true,
            GenerateThumbnails = true,
            GenerateCache = true
        };
    }
    
    public static Collection CreateValidCollection()
    {
        return new Collection(
            ObjectId.GenerateNewId(),
            "Test Collection",
            "/test/path",
            CollectionType.Image);
    }
    
    public static List<Collection> CreateValidCollections(int count)
    {
        var collections = new List<Collection>();
        for (int i = 0; i < count; i++)
        {
            collections.Add(new Collection(
                ObjectId.GenerateNewId(),
                $"Test Collection {i}",
                $"/test/path/{i}",
                CollectionType.Image));
        }
        return collections;
    }
}
```

### Mocking Guidelines
```csharp
public class MockingExamples
{
    [TestMethod]
    public void Example_MockSetup()
    {
        // Arrange
        var mockRepository = new Mock<ICollectionRepository>();
        
        // Setup return value
        mockRepository.Setup(r => r.GetByIdAsync(It.IsAny<ObjectId>()))
            .ReturnsAsync(new Collection());
        
        // Setup with specific parameter
        var collectionId = ObjectId.GenerateNewId();
        mockRepository.Setup(r => r.GetByIdAsync(collectionId))
            .ReturnsAsync(new Collection());
        
        // Setup with condition
        mockRepository.Setup(r => r.GetByIdAsync(It.Is<ObjectId>(id => id == collectionId)))
            .ReturnsAsync(new Collection());
        
        // Setup to throw exception
        mockRepository.Setup(r => r.GetByIdAsync(It.IsAny<ObjectId>()))
            .ThrowsAsync(new CollectionNotFoundException("Collection not found"));
        
        // Setup for void methods
        mockRepository.Setup(r => r.DeleteAsync(It.IsAny<ObjectId>()))
            .Returns(Task.CompletedTask);
        
        // Verify method calls
        mockRepository.Verify(r => r.GetByIdAsync(It.IsAny<ObjectId>()), Times.Once);
        mockRepository.Verify(r => r.CreateAsync(It.IsAny<Collection>()), Times.Never);
        
        // Verify with specific parameters
        mockRepository.Verify(r => r.GetByIdAsync(collectionId), Times.Once);
    }
}
```

## Integration Testing

### Database Integration Tests
```csharp
[TestClass]
public class CollectionRepositoryIntegrationTests
{
    private MongoDbContext _context;
    private ICollectionRepository _repository;
    
    [TestInitialize]
    public void Setup()
    {
        var connectionString = "mongodb://localhost:27017/imageviewer_test";
        var client = new MongoClient(connectionString);
        var database = client.GetDatabase("imageviewer_test");
        
        _context = new MongoDbContext(database);
        _repository = new MongoCollectionRepository(_context);
        
        // Clean up test data
        database.DropCollection("collections");
    }
    
    [TestCleanup]
    public void Cleanup()
    {
        // Clean up test data
        var database = _context.Database;
        database.DropCollection("collections");
    }
    
    [TestMethod]
    public async Task CreateCollectionAsync_ValidCollection_CreatesInDatabase()
    {
        // Arrange
        var collection = new Collection(
            ObjectId.GenerateNewId(),
            "Test Collection",
            "/test/path",
            CollectionType.Image);
        
        // Act
        var result = await _repository.CreateAsync(collection);
        
        // Assert
        Assert.IsNotNull(result);
        Assert.AreEqual(collection.Name, result.Name);
        
        // Verify in database
        var savedCollection = await _repository.GetByIdAsync(collection.Id);
        Assert.IsNotNull(savedCollection);
        Assert.AreEqual(collection.Name, savedCollection.Name);
    }
    
    [TestMethod]
    public async Task GetCollectionsAsync_WithPagination_ReturnsCorrectResults()
    {
        // Arrange
        var libraryId = ObjectId.GenerateNewId();
        var collections = new List<Collection>();
        
        for (int i = 0; i < 25; i++)
        {
            var collection = new Collection(
                libraryId,
                $"Collection {i}",
                $"/test/path/{i}",
                CollectionType.Image);
            await _repository.CreateAsync(collection);
            collections.Add(collection);
        }
        
        // Act
        var result = await _repository.GetCollectionsAsync(new GetCollectionsRequest
        {
            LibraryId = libraryId,
            Page = 1,
            Limit = 10
        });
        
        // Assert
        Assert.AreEqual(10, result.Data.Count);
        Assert.AreEqual(25, result.Total);
        Assert.AreEqual(3, result.TotalPages);
        Assert.IsTrue(result.HasNext);
        Assert.IsFalse(result.HasPrevious);
    }
    
    [TestMethod]
    public async Task SearchCollectionsAsync_WithQuery_ReturnsMatchingResults()
    {
        // Arrange
        var libraryId = ObjectId.GenerateNewId();
        var collections = new[]
        {
            new Collection(libraryId, "Nature Photos", "/nature", CollectionType.Image),
            new Collection(libraryId, "City Photos", "/city", CollectionType.Image),
            new Collection(libraryId, "Nature Videos", "/nature/videos", CollectionType.Video)
        };
        
        foreach (var collection in collections)
        {
            await _repository.CreateAsync(collection);
        }
        
        // Act
        var result = await _repository.SearchAsync("nature");
        
        // Assert
        Assert.AreEqual(2, result.Count());
        Assert.IsTrue(result.Any(c => c.Name == "Nature Photos"));
        Assert.IsTrue(result.Any(c => c.Name == "Nature Videos"));
    }
}
```

### API Integration Tests
```csharp
[TestClass]
public class CollectionsControllerIntegrationTests
{
    private WebApplicationFactory<Program> _factory;
    private HttpClient _client;
    
    [TestInitialize]
    public void Setup()
    {
        _factory = new WebApplicationFactory<Program>()
            .WithWebHostBuilder(builder =>
            {
                builder.ConfigureServices(services =>
                {
                    // Replace with test database
                    services.AddSingleton<IMongoDatabase>(provider =>
                    {
                        var client = new MongoClient("mongodb://localhost:27017/imageviewer_test");
                        return client.GetDatabase("imageviewer_test");
                    });
                });
            });
        
        _client = _factory.CreateClient();
    }
    
    [TestCleanup]
    public void Cleanup()
    {
        _client?.Dispose();
        _factory?.Dispose();
    }
    
    [TestMethod]
    public async Task GetCollections_ValidRequest_ReturnsOk()
    {
        // Arrange
        var request = new GetCollectionsRequest
        {
            Page = 1,
            Limit = 10
        };
        
        // Act
        var response = await _client.GetAsync($"/api/v1/collections?page={request.Page}&limit={request.Limit}");
        
        // Assert
        Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
        
        var content = await response.Content.ReadAsStringAsync();
        var result = JsonSerializer.Deserialize<PagedResult<CollectionDto>>(content);
        
        Assert.IsNotNull(result);
        Assert.IsNotNull(result.Data);
    }
    
    [TestMethod]
    public async Task CreateCollection_ValidRequest_ReturnsCreated()
    {
        // Arrange
        var request = new CreateCollectionRequest
        {
            Name = "Test Collection",
            Path = "/test/path",
            Type = CollectionType.Image,
            LibraryId = ObjectId.GenerateNewId().ToString()
        };
        
        var json = JsonSerializer.Serialize(request);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        
        // Act
        var response = await _client.PostAsync("/api/v1/collections", content);
        
        // Assert
        Assert.AreEqual(HttpStatusCode.Created, response.StatusCode);
        
        var responseContent = await response.Content.ReadAsStringAsync();
        var result = JsonSerializer.Deserialize<CollectionDto>(responseContent);
        
        Assert.IsNotNull(result);
        Assert.AreEqual(request.Name, result.Name);
        Assert.AreEqual(request.Path, result.Path);
    }
    
    [TestMethod]
    public async Task CreateCollection_InvalidRequest_ReturnsBadRequest()
    {
        // Arrange
        var request = new CreateCollectionRequest
        {
            Name = "", // Invalid: empty name
            Path = "/test/path",
            Type = CollectionType.Image,
            LibraryId = ObjectId.GenerateNewId().ToString()
        };
        
        var json = JsonSerializer.Serialize(request);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        
        // Act
        var response = await _client.PostAsync("/api/v1/collections", content);
        
        // Assert
        Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode);
    }
}
```

## Performance Testing

### Load Testing
```csharp
[TestClass]
public class PerformanceTests
{
    private WebApplicationFactory<Program> _factory;
    private HttpClient _client;
    
    [TestInitialize]
    public void Setup()
    {
        _factory = new WebApplicationFactory<Program>();
        _client = _factory.CreateClient();
    }
    
    [TestMethod]
    public async Task GetCollections_LoadTest_PerformsWithinThreshold()
    {
        // Arrange
        const int concurrentRequests = 100;
        const int maxResponseTime = 1000; // 1 second
        
        var tasks = new List<Task<HttpResponseMessage>>();
        
        // Act
        var stopwatch = Stopwatch.StartNew();
        
        for (int i = 0; i < concurrentRequests; i++)
        {
            tasks.Add(_client.GetAsync("/api/v1/collections?page=1&limit=10"));
        }
        
        var responses = await Task.WhenAll(tasks);
        stopwatch.Stop();
        
        // Assert
        Assert.IsTrue(stopwatch.ElapsedMilliseconds < maxResponseTime);
        
        var successCount = responses.Count(r => r.IsSuccessStatusCode);
        Assert.IsTrue(successCount >= concurrentRequests * 0.95); // 95% success rate
    }
    
    [TestMethod]
    public async Task CreateCollection_StressTest_HandlesHighLoad()
    {
        // Arrange
        const int concurrentRequests = 50;
        const int maxResponseTime = 2000; // 2 seconds
        
        var tasks = new List<Task<HttpResponseMessage>>();
        
        // Act
        var stopwatch = Stopwatch.StartNew();
        
        for (int i = 0; i < concurrentRequests; i++)
        {
            var request = new CreateCollectionRequest
            {
                Name = $"Stress Test Collection {i}",
                Path = $"/stress/test/{i}",
                Type = CollectionType.Image,
                LibraryId = ObjectId.GenerateNewId().ToString()
            };
            
            var json = JsonSerializer.Serialize(request);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            tasks.Add(_client.PostAsync("/api/v1/collections", content));
        }
        
        var responses = await Task.WhenAll(tasks);
        stopwatch.Stop();
        
        // Assert
        Assert.IsTrue(stopwatch.ElapsedMilliseconds < maxResponseTime);
        
        var successCount = responses.Count(r => r.IsSuccessStatusCode);
        Assert.IsTrue(successCount >= concurrentRequests * 0.90); // 90% success rate
    }
}
```

## Security Testing

### Authentication Tests
```csharp
[TestClass]
public class SecurityTests
{
    private WebApplicationFactory<Program> _factory;
    private HttpClient _client;
    
    [TestInitialize]
    public void Setup()
    {
        _factory = new WebApplicationFactory<Program>();
        _client = _factory.CreateClient();
    }
    
    [TestMethod]
    public async Task GetCollections_WithoutAuthentication_ReturnsUnauthorized()
    {
        // Act
        var response = await _client.GetAsync("/api/v1/collections");
        
        // Assert
        Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode);
    }
    
    [TestMethod]
    public async Task CreateCollection_WithInvalidToken_ReturnsUnauthorized()
    {
        // Arrange
        _client.DefaultRequestHeaders.Authorization = 
            new AuthenticationHeaderValue("Bearer", "invalid-token");
        
        var request = new CreateCollectionRequest
        {
            Name = "Test Collection",
            Path = "/test/path",
            Type = CollectionType.Image,
            LibraryId = ObjectId.GenerateNewId().ToString()
        };
        
        var json = JsonSerializer.Serialize(request);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        
        // Act
        var response = await _client.PostAsync("/api/v1/collections", content);
        
        // Assert
        Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode);
    }
    
    [TestMethod]
    public async Task CreateCollection_WithValidToken_ReturnsCreated()
    {
        // Arrange
        var token = await GetValidTokenAsync();
        _client.DefaultRequestHeaders.Authorization = 
            new AuthenticationHeaderValue("Bearer", token);
        
        var request = new CreateCollectionRequest
        {
            Name = "Test Collection",
            Path = "/test/path",
            Type = CollectionType.Image,
            LibraryId = ObjectId.GenerateNewId().ToString()
        };
        
        var json = JsonSerializer.Serialize(request);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        
        // Act
        var response = await _client.PostAsync("/api/v1/collections", content);
        
        // Assert
        Assert.AreEqual(HttpStatusCode.Created, response.StatusCode);
    }
    
    private async Task<string> GetValidTokenAsync()
    {
        // Implementation to get valid JWT token
        // This would typically involve calling an authentication endpoint
        return "valid-jwt-token";
    }
}
```

## Test Configuration

### Test Settings
```json
{
  "TestSettings": {
    "Database": {
      "ConnectionString": "mongodb://localhost:27017/imageviewer_test",
      "DatabaseName": "imageviewer_test"
    },
    "Performance": {
      "MaxResponseTime": 1000,
      "ConcurrentRequests": 100,
      "SuccessRateThreshold": 0.95
    },
    "Security": {
      "TestJwtSecret": "test-secret-key",
      "TestUserId": "test-user-id"
    }
  }
}
```

### Test Base Classes
```csharp
public abstract class IntegrationTestBase
{
    protected WebApplicationFactory<Program> Factory { get; private set; }
    protected HttpClient Client { get; private set; }
    protected IMongoDatabase Database { get; private set; }
    
    [TestInitialize]
    public virtual void Setup()
    {
        Factory = new WebApplicationFactory<Program>()
            .WithWebHostBuilder(builder =>
            {
                builder.ConfigureServices(services =>
                {
                    // Configure test services
                    ConfigureTestServices(services);
                });
            });
        
        Client = Factory.CreateClient();
        Database = GetTestDatabase();
        
        // Clean up test data
        CleanupTestData();
    }
    
    [TestCleanup]
    public virtual void Cleanup()
    {
        Client?.Dispose();
        Factory?.Dispose();
        
        // Clean up test data
        CleanupTestData();
    }
    
    protected virtual void ConfigureTestServices(IServiceCollection services)
    {
        // Override in derived classes
    }
    
    protected virtual IMongoDatabase GetTestDatabase()
    {
        var client = new MongoClient("mongodb://localhost:27017/imageviewer_test");
        return client.GetDatabase("imageviewer_test");
    }
    
    protected virtual void CleanupTestData()
    {
        // Clean up test data
        Database.DropCollection("collections");
        Database.DropCollection("mediaItems");
        Database.DropCollection("users");
    }
}
```

## Testing Best Practices

### 1. Test Isolation
- Each test should be independent
- Clean up test data after each test
- Use test-specific databases
- Avoid shared state between tests

### 2. Test Data Management
- Use factories for creating test data
- Use realistic test data
- Clean up test data after tests
- Use test-specific databases

### 3. Assertions
- Use descriptive assertion messages
- Test both positive and negative scenarios
- Verify all important aspects of the result
- Use appropriate assertion methods

### 4. Mocking
- Mock external dependencies
- Use mocks to control test scenarios
- Verify mock interactions
- Keep mocks simple and focused

### 5. Performance Testing
- Set realistic performance thresholds
- Test under various load conditions
- Monitor resource usage
- Test both individual operations and end-to-end scenarios

### 6. Security Testing
- Test authentication and authorization
- Test input validation
- Test error handling
- Test for common vulnerabilities

### 7. Test Maintenance
- Keep tests up to date with code changes
- Refactor tests when refactoring code
- Remove obsolete tests
- Maintain test documentation

### 8. Test Coverage
- Aim for high code coverage
- Focus on critical business logic
- Test edge cases and error scenarios
- Use coverage reports to identify gaps